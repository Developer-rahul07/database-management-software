<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Database Management</title>
    <link href="../assets/admin.css" rel="stylesheet">
    <link href="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
        integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js"
        integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"
        integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
        crossorigin="anonymous"></script>

    <style>
        /* Your CSS styles here */
        .results-table {
            width: 100%;
            /* border-collapse: collapse; */
        }

        .results-table th,
        .results-table td {
            border: 1px solid #0f0101;
            padding: 8px;
            text-align: left;
        }

        .results-table th {
            font-weight: bold;
        }

        #input-field-group {
            display: flex;
            justify-content: space-evenly;
            margin-top: 3%;
            margin-bottom: 3%;
        }

        .inputFieldClass {
            padding: 5px;
            border: 2px solid rgb(89, 83, 83);
            border-radius: 5px;
        }
    </style>

</head>


<body style="background-color:lightblue;">
    <%- include('./public/Navbar.ejs') %>


        <div id="searchResultsContainer">
            <table class="results-table">
                <thead>
                    <tr>
                        <th>
                            <input type="text" id="searchInput" class="inputFieldClass" placeholder="Search FILENAME..."
                                onkeyup="searchData()">
                        </th>
                        <th>
                            <input type="text" id="yearInput" class="inputFieldClass" placeholder="Search YEAR..."
                                onkeyup="searchData()">
                        </th>
                        <th>
                            <input type="text" id="codeInput" class="inputFieldClass" placeholder="Search CODE..."
                                onkeyup="searchData()">
                        </th>
                        <th>
                            <input type="text" id="talukInput" class="inputFieldClass" placeholder="Search TALUK..."
                                onkeyup="searchData()">
                        </th>
                        <th>
                            <input type="text" id="hobliInput" class="inputFieldClass" placeholder="Search HOBLI..."
                                onkeyup="searchData()">
                        </th>
                        <th>
                            <input type="text" id="villageInput" class="inputFieldClass" placeholder="Search VILLAGE..."
                                onkeyup="searchData()">
                        </th>
                        <th>
                            <input type="text" id="surveyInput" class="inputFieldClass"
                                placeholder="Search SURVEYNUMBER..." onkeyup="searchData()">
                        </th>
                    </tr>
                    <tr>
                        <th>FILE NAME</th>
                        <th>YEAR</th>
                        <th>CODE</th>
                        <th>TALUK</th>
                        <th>HOBLI</th>
                        <th>VILLAGE</th>
                        <th>SURVEY NUMBER</th>
                        <th>Pdf View</th>
                        <th>Delete</th>
                        <th>Add Comment</th>
                    </tr>
                </thead>
                <tbody id="searchResults"></tbody>
            </table>
            <div id="pagination">
                <button id="previousButton" onclick="getPreviousPage()">Previous</button>
                <span id="currentPage">1</span>
                <button id="nextButton" onclick="getNextPage()">Next</button>
            </div>
            <div id="totalResults"></div>
            <div id="loadingIndicator" style="display: none;">Loading...</div>
            <div id="errorMessage" style="color: red;"></div>
        </div>

        <script>
            let currentPage = 1;
            const resultsPerPage = 50;
            let searchResultsData = [];
            let totalResults = 0;

            function searchData() {
                const filenameInput = document.getElementById('searchInput').value;
                const yearInput = document.getElementById('yearInput').value;
                const codeInput = document.getElementById('codeInput').value;
                const talukInput = document.getElementById('talukInput').value;
                const hobliInput = document.getElementById('hobliInput').value;
                const villageInput = document.getElementById('villageInput').value;
                const surveyInput = document.getElementById('surveyInput').value;
                const loadingIndicator = document.getElementById('loadingIndicator');
                loadingIndicator.style.display = 'block';

                fetch(`/search/query?filename=${filenameInput}&year=${yearInput}&code=${codeInput}&taluk=${talukInput}&hobli=${hobliInput}&village=${villageInput}&survey=${surveyInput}&page=${currentPage}&resultsPerPage=${resultsPerPage}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        searchResultsData = data.results;
                        totalResults = data.totalResults;
                        currentPage = 1;
                        displayPage(currentPage);
                        updatePaginationControls();
                        displayTotalResults(totalResults);
                        // sendSearchResultsDataToServer(searchResultsData); // Send the data to the server
                    })
                    .catch(error => {
                        console.error(error);
                        displayErrorMessage(error.message);
                    })
                    .finally(() => {
                        loadingIndicator.style.display = 'none';
                    });
            }

            // this code is used to send data to server using post method
            // function sendSearchResultsDataToServer(data) {
            //     fetch('/allsearch', {
            //         method: 'POST',
            //         headers: {
            //             'Content-Type': 'application/json',
            //         },
            //         body: JSON.stringify({ searchResultsData: data }),
            //     })
            //         .then(response => {
            //             if (!response.ok) {
            //                 throw new Error('Network response was not ok');
            //             }
            //             return response.text(); // Parse the response as text (if server responds with data)
            //         })
            //         .then(responseText => {
            //             console.log(responseText); // Log the server response if needed
            //         })
            //         .catch(error => {
            //             console.error(error);
            //             // Handle error if needed
            //         });
            // }

            // this code is used to send data to server using get method
            // function sendSearchResultsDataToServer(data) {
            //     const queryParams = new URLSearchParams();
            //     queryParams.append('searchResultsData', JSON.stringify(data));

            //     console.log("queryParams isisiissiissiis", queryParams.toString());

            //     fetch(`/allsearch?${queryParams.toString()}`, {
            //         method: 'GET',
            //     })
            //         .then(response => {
            //             if (!response.ok) {
            //                 throw new Error('Network response was not ok');
            //             }
            //             return response.text(); // Parse the response as text (if server responds with data)
            //         })
            //         .then(responseText => {
            //             console.log(responseText); // Log the server response if needed
            //         })
            //         .catch(error => {
            //             console.error(error);
            //             // Handle error if needed
            //         });
            // }



            function displayPage(pageNumber) {
                const searchResultsTable = document.getElementById('searchResults');
                searchResultsTable.innerHTML = '';

                const startIndex = (pageNumber - 1) * resultsPerPage;
                const endIndex = startIndex + resultsPerPage;
                const pageResults = searchResultsData.slice(startIndex, endIndex);

                pageResults.forEach(result => {
                    const row = document.createElement('tr');
                    const columns = ['FILENAME', 'YEAR', 'CODE', 'TALUK', 'HOBLI', 'VILLAGE', 'SURVEYNUMBER', 'PDFNAME', 'Delete', 'COMMENT'];

                    columns.forEach(columnName => {
                        const cell = document.createElement('td');
                        if (columnName === 'PDFNAME') {
                            // Create the form and button for FILENAME column
                            const form = document.createElement('form');
                            form.action = `/pdf/${result.PDFNAME}`;
                            form.method = 'get';

                            // Add hidden input fields
                            const hiddenFields = [
                                'SRNO', 'FILENAME', 'YEAR', 'CODE', 'TALUK', 'HOBLI', 'VILLAGE', 'SURVEYNUMBER',
                                'pdfname', 'comment', 'indexName', 'listName'
                            ];

                            hiddenFields.forEach(fieldName => {
                                const input = document.createElement('input');
                                input.type = 'hidden';
                                input.id = fieldName;
                                input.name = fieldName;
                                input.value = result[fieldName] || '';
                                form.appendChild(input);
                            });

                            // Create the button
                            const button = document.createElement('button');
                            button.style.background = 'bottom';
                            button.style.border = 'aliceblue';
                            button.style.color = 'black';
                            button.innerHTML = '<i class="fa fa-eye"></i>';

                            // Append the button to the form
                            form.appendChild(button);

                            // Append the form to the cell
                            cell.appendChild(form);
                        } else if (columnName === 'Delete') {
                            // Create the form and button for FILENAME column
                            const form = document.createElement('form');
                            form.action = `/deleteInfo`;
                            form.method = 'post';

                            // Add hidden input fields
                            const hiddenFields = [
                                'SRNO', 'listName'
                            ];

                            hiddenFields.forEach(fieldName => {
                                const input = document.createElement('input');
                                input.type = 'hidden';
                                input.id = fieldName;
                                input.name = fieldName;
                                input.value = result[fieldName] || '';
                                form.appendChild(input);
                            });

                            // Create the button
                            const button = document.createElement('button');
                            button.style.background = 'bottom';
                            button.style.border = 'aliceblue';
                            button.style.color = 'black';
                            button.innerHTML = '<i class="fa fa-trash"></i>';

                            // Append the button to the form
                            form.appendChild(button);

                            // Append the form to the cell
                            cell.appendChild(form);
                        } else if (columnName === 'COMMENT') {
                            // Create the form and button for FILENAME column
                            const a = document.createElement('a');
                            a.href = `/uploadpdf/${result.PDFNAME}`;

                            a.innerHTML = '<i class="fa fa-plus"></i>';

                            // Append the button to the form
                            cell.appendChild(a);

                            // Append the form to the cell
                            // cell.appendChild(form);
                        }
                        else {
                            // For other columns, simply set the cell's text content
                            cell.textContent = result[columnName] || '';
                        }

                        // Append the cell to the row
                        row.appendChild(cell);
                    });

                    // Append the row to the table
                    searchResultsTable.appendChild(row);
                });
            }

            function updatePaginationControls() {
                const previousButton = document.getElementById('previousButton');
                const nextButton = document.getElementById('nextButton');
                const currentPageSpan = document.getElementById('currentPage');

                currentPageSpan.textContent = currentPage;

                if (currentPage === 1) {
                    previousButton.disabled = true;
                } else {
                    previousButton.disabled = false;
                }

                if (currentPage === getTotalPages()) {
                    nextButton.disabled = true;
                } else {
                    nextButton.disabled = false;
                }
            }

            function displayTotalResults(total) {
                const totalResultsDiv = document.getElementById('totalResults');
                totalResultsDiv.textContent = `Total Results: ${total}`;
            }

            function displayErrorMessage(message) {
                const errorDiv = document.getElementById('errorMessage');
                errorDiv.textContent = `Error: ${message}`;
            }

            function getTotalPages() {
                return Math.ceil(totalResults / resultsPerPage);
            }

            function getPreviousPage() {
                if (currentPage > 1) {
                    currentPage--;
                    searchData();
                }
            }

            function getNextPage() {
                const totalPages = getTotalPages();
                if (currentPage < totalPages) {
                    currentPage++;
                    searchData();
                }
            }

            // Initial search on page load (optional)
            searchData();
        </script>
</body>

</html>